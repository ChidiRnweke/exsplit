/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/expense_lists/{expenseListId}/expenses": {
    post: operations["CreateExpense"];
  };
  "/api/expenses/{expenseId}": {
    get: operations["GetExpense"];
    delete: operations["DeleteExpense"];
    patch: operations["UpdateExpense"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AuthErrorResponseContent: {
      message: string;
    };
    CircleMemberOut: {
      circleMemberId: string;
      displayName: string;
    };
    CreateExpenseRequestContent: {
      paidBy: string;
      description: string;
      /** Format: float */
      price: number;
      date: number;
      owedToPayer: components["schemas"]["OwedAmount"][];
    };
    CreateExpenseResponseContent: {
      expense: components["schemas"]["ExpenseOut"];
    };
    ExpenseOut: {
      expenseId: string;
      paidBy: components["schemas"]["CircleMemberOut"];
      description: string;
      /** Format: float */
      price: number;
      date: number;
      owedToPayer: components["schemas"]["OwedAmountOut"][];
    };
    ForbiddenErrorResponseContent: {
      message: string;
    };
    GetExpenseResponseContent: {
      expenses: components["schemas"]["ExpenseOut"];
    };
    InvalidTokenErrorResponseContent: {
      message: string;
    };
    NotFoundErrorResponseContent: {
      message: string;
    };
    OwedAmount: {
      circleMemberId: string;
      /** Format: float */
      amount: number;
    };
    OwedAmountOut: {
      fromMember: components["schemas"]["CircleMemberOut"];
      toMember: components["schemas"]["CircleMemberOut"];
      /** Format: float */
      amount: number;
    };
    UpdateExpenseRequestContent: {
      paidBy: string;
      description?: string;
      /** Format: float */
      price?: number;
      date?: number;
      owedToPayer?: components["schemas"]["OwedAmount"][];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  CreateExpense: {
    parameters: {
      path: {
        expenseListId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateExpenseRequestContent"];
      };
    };
    responses: {
      /** @description CreateExpense 200 response */
      200: {
        content: {
          "application/json": components["schemas"]["CreateExpenseResponseContent"];
        };
      };
      /** @description InvalidTokenError 400 response */
      400: {
        content: {
          "application/json": components["schemas"]["InvalidTokenErrorResponseContent"];
        };
      };
      /** @description AuthError 401 response */
      401: {
        content: {
          "application/json": components["schemas"]["AuthErrorResponseContent"];
        };
      };
      /** @description ForbiddenError 403 response */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponseContent"];
        };
      };
      /** @description NotFoundError 404 response */
      404: {
        content: {
          "application/json": components["schemas"]["NotFoundErrorResponseContent"];
        };
      };
    };
  };
  GetExpense: {
    parameters: {
      path: {
        expenseId: string;
      };
    };
    responses: {
      /** @description GetExpense 200 response */
      200: {
        content: {
          "application/json": components["schemas"]["GetExpenseResponseContent"];
        };
      };
      /** @description InvalidTokenError 400 response */
      400: {
        content: {
          "application/json": components["schemas"]["InvalidTokenErrorResponseContent"];
        };
      };
      /** @description AuthError 401 response */
      401: {
        content: {
          "application/json": components["schemas"]["AuthErrorResponseContent"];
        };
      };
      /** @description ForbiddenError 403 response */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponseContent"];
        };
      };
      /** @description NotFoundError 404 response */
      404: {
        content: {
          "application/json": components["schemas"]["NotFoundErrorResponseContent"];
        };
      };
    };
  };
  DeleteExpense: {
    parameters: {
      path: {
        expenseId: string;
      };
    };
    responses: {
      /** @description DeleteExpense 200 response */
      200: {
        content: never;
      };
      /** @description InvalidTokenError 400 response */
      400: {
        content: {
          "application/json": components["schemas"]["InvalidTokenErrorResponseContent"];
        };
      };
      /** @description AuthError 401 response */
      401: {
        content: {
          "application/json": components["schemas"]["AuthErrorResponseContent"];
        };
      };
      /** @description ForbiddenError 403 response */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponseContent"];
        };
      };
    };
  };
  UpdateExpense: {
    parameters: {
      path: {
        expenseId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateExpenseRequestContent"];
      };
    };
    responses: {
      /** @description UpdateExpense 200 response */
      200: {
        content: never;
      };
      /** @description InvalidTokenError 400 response */
      400: {
        content: {
          "application/json": components["schemas"]["InvalidTokenErrorResponseContent"];
        };
      };
      /** @description AuthError 401 response */
      401: {
        content: {
          "application/json": components["schemas"]["AuthErrorResponseContent"];
        };
      };
      /** @description ForbiddenError 403 response */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenErrorResponseContent"];
        };
      };
      /** @description NotFoundError 404 response */
      404: {
        content: {
          "application/json": components["schemas"]["NotFoundErrorResponseContent"];
        };
      };
    };
  };
}
