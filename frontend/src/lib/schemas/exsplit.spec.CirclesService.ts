/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/api/circles/{circleId}': {
		get: operations['GetCircle'];
		delete: operations['DeleteCircle'];
		patch: operations['UpdateCircle'];
	};
	'/api/circles/{circleId}/members': {
		get: operations['ListCircleMembers'];
		post: operations['AddUserToCircle'];
	};
	'/api/circles/{circleId}/members/{memberId}': {
		delete: operations['RemoveMemberFromCircle'];
		patch: operations['ChangeDisplayName'];
	};
	'/api/users/{userId}/circles': {
		get: operations['ListCirclesForUser'];
		post: operations['CreateCircle'];
	};
}

export type webhooks = Record<string, never>;

export interface components {
	schemas: {
		AddUserToCircleRequestContent: {
			userId: string;
			displayName: string;
		};
		AuthErrorResponseContent: {
			message: string;
		};
		ChangeDisplayNameRequestContent: {
			displayName: string;
		};
		CircleMemberOut: {
			circleMemberId: string;
			displayName: string;
		};
		CircleOut: {
			circleId: string;
			circleName: string;
			description: string;
		};
		CreateCircleRequestContent: {
			displayName: string;
			circleName: string;
			description?: string;
		};
		CreateCircleResponseContent: {
			circle: components['schemas']['CircleOut'];
		};
		ForbiddenErrorResponseContent: {
			message: string;
		};
		GetCircleResponseContent: {
			circle: components['schemas']['CircleOut'];
		};
		InvalidTokenErrorResponseContent: {
			message: string;
		};
		ListCircleMembersResponseContent: {
			members: components['schemas']['CircleMemberOut'][];
		};
		ListCirclesForUserResponseContent: {
			circles: components['schemas']['CircleOut'][];
		};
		NotFoundErrorResponseContent: {
			message: string;
		};
		UpdateCircleRequestContent: {
			circleName?: string;
			description?: string;
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
	GetCircle: {
		parameters: {
			path: {
				circleId: string;
			};
		};
		responses: {
			/** @description GetCircle 200 response */
			200: {
				content: {
					'application/json': components['schemas']['GetCircleResponseContent'];
				};
			};
			/** @description InvalidTokenError 400 response */
			400: {
				content: {
					'application/json': components['schemas']['InvalidTokenErrorResponseContent'];
				};
			};
			/** @description AuthError 401 response */
			401: {
				content: {
					'application/json': components['schemas']['AuthErrorResponseContent'];
				};
			};
			/** @description ForbiddenError 403 response */
			403: {
				content: {
					'application/json': components['schemas']['ForbiddenErrorResponseContent'];
				};
			};
			/** @description NotFoundError 404 response */
			404: {
				content: {
					'application/json': components['schemas']['NotFoundErrorResponseContent'];
				};
			};
		};
	};
	DeleteCircle: {
		parameters: {
			path: {
				circleId: string;
			};
		};
		responses: {
			/** @description DeleteCircle 200 response */
			200: {
				content: never;
			};
			/** @description InvalidTokenError 400 response */
			400: {
				content: {
					'application/json': components['schemas']['InvalidTokenErrorResponseContent'];
				};
			};
			/** @description AuthError 401 response */
			401: {
				content: {
					'application/json': components['schemas']['AuthErrorResponseContent'];
				};
			};
			/** @description ForbiddenError 403 response */
			403: {
				content: {
					'application/json': components['schemas']['ForbiddenErrorResponseContent'];
				};
			};
		};
	};
	UpdateCircle: {
		parameters: {
			path: {
				circleId: string;
			};
		};
		requestBody?: {
			content: {
				'application/json': components['schemas']['UpdateCircleRequestContent'];
			};
		};
		responses: {
			/** @description UpdateCircle 200 response */
			200: {
				content: never;
			};
			/** @description InvalidTokenError 400 response */
			400: {
				content: {
					'application/json': components['schemas']['InvalidTokenErrorResponseContent'];
				};
			};
			/** @description AuthError 401 response */
			401: {
				content: {
					'application/json': components['schemas']['AuthErrorResponseContent'];
				};
			};
			/** @description ForbiddenError 403 response */
			403: {
				content: {
					'application/json': components['schemas']['ForbiddenErrorResponseContent'];
				};
			};
			/** @description NotFoundError 404 response */
			404: {
				content: {
					'application/json': components['schemas']['NotFoundErrorResponseContent'];
				};
			};
		};
	};
	ListCircleMembers: {
		parameters: {
			path: {
				circleId: string;
			};
		};
		responses: {
			/** @description ListCircleMembers 200 response */
			200: {
				content: {
					'application/json': components['schemas']['ListCircleMembersResponseContent'];
				};
			};
			/** @description InvalidTokenError 400 response */
			400: {
				content: {
					'application/json': components['schemas']['InvalidTokenErrorResponseContent'];
				};
			};
			/** @description AuthError 401 response */
			401: {
				content: {
					'application/json': components['schemas']['AuthErrorResponseContent'];
				};
			};
			/** @description ForbiddenError 403 response */
			403: {
				content: {
					'application/json': components['schemas']['ForbiddenErrorResponseContent'];
				};
			};
			/** @description NotFoundError 404 response */
			404: {
				content: {
					'application/json': components['schemas']['NotFoundErrorResponseContent'];
				};
			};
		};
	};
	AddUserToCircle: {
		parameters: {
			path: {
				circleId: string;
			};
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['AddUserToCircleRequestContent'];
			};
		};
		responses: {
			/** @description AddUserToCircle 200 response */
			200: {
				content: never;
			};
			/** @description InvalidTokenError 400 response */
			400: {
				content: {
					'application/json': components['schemas']['InvalidTokenErrorResponseContent'];
				};
			};
			/** @description AuthError 401 response */
			401: {
				content: {
					'application/json': components['schemas']['AuthErrorResponseContent'];
				};
			};
			/** @description ForbiddenError 403 response */
			403: {
				content: {
					'application/json': components['schemas']['ForbiddenErrorResponseContent'];
				};
			};
			/** @description NotFoundError 404 response */
			404: {
				content: {
					'application/json': components['schemas']['NotFoundErrorResponseContent'];
				};
			};
		};
	};
	RemoveMemberFromCircle: {
		parameters: {
			path: {
				circleId: string;
				memberId: string;
			};
		};
		responses: {
			/** @description RemoveMemberFromCircle 200 response */
			200: {
				content: never;
			};
			/** @description InvalidTokenError 400 response */
			400: {
				content: {
					'application/json': components['schemas']['InvalidTokenErrorResponseContent'];
				};
			};
			/** @description AuthError 401 response */
			401: {
				content: {
					'application/json': components['schemas']['AuthErrorResponseContent'];
				};
			};
			/** @description ForbiddenError 403 response */
			403: {
				content: {
					'application/json': components['schemas']['ForbiddenErrorResponseContent'];
				};
			};
			/** @description NotFoundError 404 response */
			404: {
				content: {
					'application/json': components['schemas']['NotFoundErrorResponseContent'];
				};
			};
		};
	};
	ChangeDisplayName: {
		parameters: {
			path: {
				circleId: string;
				memberId: string;
			};
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['ChangeDisplayNameRequestContent'];
			};
		};
		responses: {
			/** @description ChangeDisplayName 200 response */
			200: {
				content: never;
			};
			/** @description InvalidTokenError 400 response */
			400: {
				content: {
					'application/json': components['schemas']['InvalidTokenErrorResponseContent'];
				};
			};
			/** @description AuthError 401 response */
			401: {
				content: {
					'application/json': components['schemas']['AuthErrorResponseContent'];
				};
			};
			/** @description ForbiddenError 403 response */
			403: {
				content: {
					'application/json': components['schemas']['ForbiddenErrorResponseContent'];
				};
			};
			/** @description NotFoundError 404 response */
			404: {
				content: {
					'application/json': components['schemas']['NotFoundErrorResponseContent'];
				};
			};
		};
	};
	ListCirclesForUser: {
		parameters: {
			path: {
				userId: string;
			};
		};
		responses: {
			/** @description ListCirclesForUser 200 response */
			200: {
				content: {
					'application/json': components['schemas']['ListCirclesForUserResponseContent'];
				};
			};
			/** @description InvalidTokenError 400 response */
			400: {
				content: {
					'application/json': components['schemas']['InvalidTokenErrorResponseContent'];
				};
			};
			/** @description AuthError 401 response */
			401: {
				content: {
					'application/json': components['schemas']['AuthErrorResponseContent'];
				};
			};
			/** @description ForbiddenError 403 response */
			403: {
				content: {
					'application/json': components['schemas']['ForbiddenErrorResponseContent'];
				};
			};
			/** @description NotFoundError 404 response */
			404: {
				content: {
					'application/json': components['schemas']['NotFoundErrorResponseContent'];
				};
			};
		};
	};
	CreateCircle: {
		parameters: {
			path: {
				userId: string;
			};
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['CreateCircleRequestContent'];
			};
		};
		responses: {
			/** @description CreateCircle 200 response */
			200: {
				content: {
					'application/json': components['schemas']['CreateCircleResponseContent'];
				};
			};
			/** @description InvalidTokenError 400 response */
			400: {
				content: {
					'application/json': components['schemas']['InvalidTokenErrorResponseContent'];
				};
			};
			/** @description AuthError 401 response */
			401: {
				content: {
					'application/json': components['schemas']['AuthErrorResponseContent'];
				};
			};
			/** @description ForbiddenError 403 response */
			403: {
				content: {
					'application/json': components['schemas']['ForbiddenErrorResponseContent'];
				};
			};
			/** @description NotFoundError 404 response */
			404: {
				content: {
					'application/json': components['schemas']['NotFoundErrorResponseContent'];
				};
			};
		};
	};
}
