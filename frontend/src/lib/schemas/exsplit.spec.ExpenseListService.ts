/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/api/circles/{circleId}/expenseLists': {
		get: operations['GetExpenseLists'];
		post: operations['CreateExpenseList'];
	};
	'/api/expenseLists/{expenseListId}': {
		get: operations['GetExpenseList'];
		put: operations['UpdateExpenseList'];
		delete: operations['DeleteExpenseList'];
	};
	'/api/expenseLists/{expenseListId}/settle': {
		get: operations['GetSettledExpenseLists'];
		post: operations['SettleExpenseList'];
	};
}

export type webhooks = Record<string, never>;

export interface components {
	schemas: {
		AuthErrorResponseContent: {
			message: string;
		};
		CircleMemberOut: {
			circleMemberId: string;
			displayName: string;
		};
		CreateExpenseListRequestContent: {
			name: string;
		};
		CreateExpenseListResponseContent: {
			expenseList: components['schemas']['ExpenseListOut'];
		};
		ExpenseListDetailOut: {
			summary: components['schemas']['ExpenseListOut'];
			expenses: components['schemas']['ExpenseOut'][];
			/** Format: float */
			totalExpense: number;
			totalOwed: components['schemas']['OwedAmountOut'][];
		};
		ExpenseListOut: {
			expenseListId: string;
			name: string;
			circleId: string;
		};
		ExpenseListsOut: {
			expenseLists: components['schemas']['ExpenseListOut'][];
		};
		ExpenseOut: {
			expenseId: string;
			paidBy: components['schemas']['CircleMemberOut'];
			description: string;
			/** Format: float */
			price: number;
			date: number;
			owedToPayer: components['schemas']['OwedAmountOut'][];
		};
		ForbiddenErrorResponseContent: {
			message: string;
		};
		GetExpenseListResponseContent: {
			expenseListDetail: components['schemas']['ExpenseListDetailOut'];
		};
		GetExpenseListsResponseContent: {
			expenseLists: components['schemas']['ExpenseListsOut'];
		};
		GetSettledExpenseListsResponseContent: {
			settledTabs: components['schemas']['SettledTabsOut'];
		};
		InvalidTokenErrorResponseContent: {
			message: string;
		};
		NotFoundErrorResponseContent: {
			message: string;
		};
		OwedAmountOut: {
			fromMember: components['schemas']['CircleMemberOut'];
			toMember: components['schemas']['CircleMemberOut'];
			/** Format: float */
			amount: number;
		};
		SettleExpenseListRequestContent: {
			fromMemberId: string;
			toMemberId: string;
			/** Format: float */
			amount: number;
		};
		SettledTabOut: {
			settledTabId: string;
			date: string;
			fromMember: components['schemas']['CircleMemberOut'];
			toMember: components['schemas']['CircleMemberOut'];
			/** Format: float */
			amount: number;
		};
		SettledTabsOut: {
			settledTabs: components['schemas']['SettledTabOut'][];
		};
		UpdateExpenseListRequestContent: {
			name: string;
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
	GetExpenseLists: {
		parameters: {
			path: {
				circleId: string;
			};
		};
		responses: {
			/** @description GetExpenseLists 200 response */
			200: {
				content: {
					'application/json': components['schemas']['GetExpenseListsResponseContent'];
				};
			};
			/** @description InvalidTokenError 400 response */
			400: {
				content: {
					'application/json': components['schemas']['InvalidTokenErrorResponseContent'];
				};
			};
			/** @description AuthError 401 response */
			401: {
				content: {
					'application/json': components['schemas']['AuthErrorResponseContent'];
				};
			};
			/** @description ForbiddenError 403 response */
			403: {
				content: {
					'application/json': components['schemas']['ForbiddenErrorResponseContent'];
				};
			};
			/** @description NotFoundError 404 response */
			404: {
				content: {
					'application/json': components['schemas']['NotFoundErrorResponseContent'];
				};
			};
		};
	};
	CreateExpenseList: {
		parameters: {
			path: {
				circleId: string;
			};
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['CreateExpenseListRequestContent'];
			};
		};
		responses: {
			/** @description CreateExpenseList 200 response */
			200: {
				content: {
					'application/json': components['schemas']['CreateExpenseListResponseContent'];
				};
			};
			/** @description InvalidTokenError 400 response */
			400: {
				content: {
					'application/json': components['schemas']['InvalidTokenErrorResponseContent'];
				};
			};
			/** @description AuthError 401 response */
			401: {
				content: {
					'application/json': components['schemas']['AuthErrorResponseContent'];
				};
			};
			/** @description ForbiddenError 403 response */
			403: {
				content: {
					'application/json': components['schemas']['ForbiddenErrorResponseContent'];
				};
			};
			/** @description NotFoundError 404 response */
			404: {
				content: {
					'application/json': components['schemas']['NotFoundErrorResponseContent'];
				};
			};
		};
	};
	GetExpenseList: {
		parameters: {
			query?: {
				onlyOutstanding?: boolean;
			};
			path: {
				expenseListId: string;
			};
		};
		responses: {
			/** @description GetExpenseList 200 response */
			200: {
				content: {
					'application/json': components['schemas']['GetExpenseListResponseContent'];
				};
			};
			/** @description InvalidTokenError 400 response */
			400: {
				content: {
					'application/json': components['schemas']['InvalidTokenErrorResponseContent'];
				};
			};
			/** @description AuthError 401 response */
			401: {
				content: {
					'application/json': components['schemas']['AuthErrorResponseContent'];
				};
			};
			/** @description ForbiddenError 403 response */
			403: {
				content: {
					'application/json': components['schemas']['ForbiddenErrorResponseContent'];
				};
			};
			/** @description NotFoundError 404 response */
			404: {
				content: {
					'application/json': components['schemas']['NotFoundErrorResponseContent'];
				};
			};
		};
	};
	UpdateExpenseList: {
		parameters: {
			path: {
				expenseListId: string;
			};
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['UpdateExpenseListRequestContent'];
			};
		};
		responses: {
			/** @description UpdateExpenseList 200 response */
			200: {
				content: never;
			};
			/** @description InvalidTokenError 400 response */
			400: {
				content: {
					'application/json': components['schemas']['InvalidTokenErrorResponseContent'];
				};
			};
			/** @description AuthError 401 response */
			401: {
				content: {
					'application/json': components['schemas']['AuthErrorResponseContent'];
				};
			};
			/** @description ForbiddenError 403 response */
			403: {
				content: {
					'application/json': components['schemas']['ForbiddenErrorResponseContent'];
				};
			};
			/** @description NotFoundError 404 response */
			404: {
				content: {
					'application/json': components['schemas']['NotFoundErrorResponseContent'];
				};
			};
		};
	};
	DeleteExpenseList: {
		parameters: {
			path: {
				expenseListId: string;
			};
		};
		responses: {
			/** @description DeleteExpenseList 200 response */
			200: {
				content: never;
			};
			/** @description InvalidTokenError 400 response */
			400: {
				content: {
					'application/json': components['schemas']['InvalidTokenErrorResponseContent'];
				};
			};
			/** @description AuthError 401 response */
			401: {
				content: {
					'application/json': components['schemas']['AuthErrorResponseContent'];
				};
			};
			/** @description ForbiddenError 403 response */
			403: {
				content: {
					'application/json': components['schemas']['ForbiddenErrorResponseContent'];
				};
			};
			/** @description NotFoundError 404 response */
			404: {
				content: {
					'application/json': components['schemas']['NotFoundErrorResponseContent'];
				};
			};
		};
	};
	GetSettledExpenseLists: {
		parameters: {
			path: {
				expenseListId: string;
			};
		};
		responses: {
			/** @description GetSettledExpenseLists 200 response */
			200: {
				content: {
					'application/json': components['schemas']['GetSettledExpenseListsResponseContent'];
				};
			};
			/** @description InvalidTokenError 400 response */
			400: {
				content: {
					'application/json': components['schemas']['InvalidTokenErrorResponseContent'];
				};
			};
			/** @description AuthError 401 response */
			401: {
				content: {
					'application/json': components['schemas']['AuthErrorResponseContent'];
				};
			};
			/** @description ForbiddenError 403 response */
			403: {
				content: {
					'application/json': components['schemas']['ForbiddenErrorResponseContent'];
				};
			};
			/** @description NotFoundError 404 response */
			404: {
				content: {
					'application/json': components['schemas']['NotFoundErrorResponseContent'];
				};
			};
		};
	};
	SettleExpenseList: {
		parameters: {
			path: {
				expenseListId: string;
			};
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['SettleExpenseListRequestContent'];
			};
		};
		responses: {
			/** @description SettleExpenseList 200 response */
			200: {
				content: never;
			};
			/** @description InvalidTokenError 400 response */
			400: {
				content: {
					'application/json': components['schemas']['InvalidTokenErrorResponseContent'];
				};
			};
			/** @description AuthError 401 response */
			401: {
				content: {
					'application/json': components['schemas']['AuthErrorResponseContent'];
				};
			};
			/** @description ForbiddenError 403 response */
			403: {
				content: {
					'application/json': components['schemas']['ForbiddenErrorResponseContent'];
				};
			};
			/** @description NotFoundError 404 response */
			404: {
				content: {
					'application/json': components['schemas']['NotFoundErrorResponseContent'];
				};
			};
		};
	};
}
